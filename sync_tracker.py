from datetime import datetime, timezone
from dateutil.parser import isoparse
import json
import os

LAST_SYNC_FILE = "last_sync.json"


def get_last_sync_time():
    if not os.path.exists(LAST_SYNC_FILE):
        now = datetime.now(timezone.utc)
        with open(LAST_SYNC_FILE, "w") as f:
            json.dump({"last_sync": now.isoformat()}, f)
        print(f"üìÅ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º (UTC): {now.isoformat()}")
        return now

    try:
        with open(LAST_SYNC_FILE, "r") as f:
            data = json.load(f)
            last_sync_raw = data.get("last_sync")

            print(f"üìÑ –°—á–∏—Ç–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏: {last_sync_raw} ({type(last_sync_raw)})")

            if not last_sync_raw or not isinstance(last_sync_raw, str):
                raise ValueError("–ü–æ–ª–µ 'last_sync' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")

            return isoparse(last_sync_raw)
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏: {e}. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ–∫—É—â–µ–µ UTC-–≤—Ä–µ–º—è.")
        now = datetime.now(timezone.utc)
        with open(LAST_SYNC_FILE, "w") as f:
            json.dump({"last_sync": now.isoformat()}, f)
        return now




def update_last_sync_time(new_time):
    if new_time.tzinfo is None:
        new_time = new_time.replace(tzinfo=timezone.utc)

    with open(LAST_SYNC_FILE, "w") as f:
        json.dump({"last_sync": new_time.isoformat()}, f)
    print(f"üìù –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {new_time.isoformat()}")
