import os
import requests
import json
from typing import Optional
from datetime import datetime

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
ORDERS_API_URL = os.getenv("UXIM_API_URL")
PRODUCTS_API_URL = os.getenv("UXIM_PRODUCTS_URL")

def fetch_orders_from_uxim(x_token: str) -> list:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'new' —Å —Å–µ—Ä–≤–µ—Ä–∞ UXIM.
    """

    headers = {
        "Content-Type": "application/json",
        "Accept": "application/json",
        "X-TOKEN": x_token,
    }

    cookies = {
        "X-TOKEN": x_token
    }

    payload = {
        "filter": {
            "status": "new"
        }
    }

    try:
        response = requests.post(ORDERS_API_URL, headers=headers, cookies=cookies, json=payload)
        response.raise_for_status()

        data = response.json()

        orders = data.get("result", [])

        print(f"üì¶ –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º NEW: {len(orders)}")
        return orders

    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤: {e}")
    except json.JSONDecodeError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {e}")
    except Exception as e:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

    return []

def fetch_products_from_site(x_token: str) -> dict:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –í–°–ï —Ç–æ–≤–∞—Ä—ã —Å —Å–∞–π—Ç–∞ UXIM —á–µ—Ä–µ–∑ POST-–∑–∞–ø—Ä–æ—Å —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π body (—Å —Ñ–∏–ª—å—Ç—Ä–æ–º).
    """

    API_PRODUCT_URL = "https://pitaka.admin.ux.im/api/item/filter"

    headers = {
        "Content-Type": "application/json",
        "Accept": "application/json",
        "X-TOKEN": x_token,
    }

    cookies = {
        "X-TOKEN": x_token,
    }

    all_products = []
    page = 1
    per_page = 50  # –ú–æ–∂–Ω–æ —Å—Ä–∞–∑—É 50 —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É

    while True:
        payload = {
            "filter": {
                "page": page,
                "perPage": per_page
            }
        }

        response = requests.post(API_PRODUCT_URL, headers=headers, cookies=cookies, json=payload)
        response.raise_for_status()

        data = response.json()

        products_list = data.get("list", []) or data.get("result", [])

        if not products_list:
            print(f"‚ÑπÔ∏è –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page}. –û—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –∑–∞–≥—Ä—É–∑–∫—É.")
            break

        all_products.extend(products_list)
        print(f"üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page}: {len(products_list)}")

        if len(products_list) < per_page:
            break  # —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞

        page += 1

    products_by_article = {}
    for item in all_products:
        article = item.get("article")
        if article:
            products_by_article[article.strip().upper()] = item

    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤—Å–µ–≥–æ: {len(products_by_article)}")
    return products_by_article
